@page "/"
@using System.ComponentModel.DataAnnotations

<PageTitle>Products</PageTitle>

<MudContainer Class="mt-n16">

    <MudItem Class="justify-center">
        <MudPaper Class="pt-2 mt-n2" Elevation="4">

            <div style="display:flex; justify-content: center; align-items: center;" class="main-box">
                <MudImage Class="mx-4"  Src="images/BB.png" Width="90" />

                <MudItem Class="py-4 d-flex flex-1" Elevation="0" xs="12" sm="6" md="4">
                    <EditForm style="width:1200px; border:solid; border-radius:10px; color:#73B23B" EditContext="editContext1">
                    <DataAnnotationsValidator />
                    <MudAutocomplete @bind-Value="choice1.State" Required="true"
                                        SearchFunc="@SearchAsync" Immediate="true" CoerceValue="@coerceValue" ResetValueOnEmptyText="true"
                                        AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                        For="@(() => choice1.State)" />

                        @if (success1)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }

                    </EditForm>
                </MudItem>

                <div style="display:flex;align-items:center; justify-content:center" class="hidden-block">
                    <MudButton Class="pa-4 mx-4 rounded-lg" Variant="Variant.Outlined">
                        <MudIcon Icon="@Icons.Material.Filled.Place" Color="Color.Success"/>
                        Tashkent
                    </MudButton>

                    <MudButton Class="pa-4 mx-4 rounded-lg" Variant="Variant.Outlined">
                        <MudIcon Icon="@Icons.Material.Filled.LocalGroceryStore" Color="Color.Success"></MudIcon>
                    </MudButton>

                    <MudButton Class="pa-4 mx-4 rounded-lg" Variant="Variant.Outlined">
                    <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Success"></MudIcon>
                </MudButton>
                </div>
            </div>
        </MudPaper>
    </MudItem>

    <MudText Typo="Typo.h6">
        Maxsulot turlari
    </MudText>

    <MudItem Class="d-flex justify-center flex-wrap flex-grow-1 gap-4" MaxWidth="1500px" Height="320px">
        @for(int i = 0 ; i< 9; i++)
        {
            <MudPaper Class="d-flex align-center my-2 mx-1" Outlined="true" Width="304px" Height="104px">
                <MudImage Src="images/mevalar.png" Width="98" Height="60" Alt="mevalar.png" Class="rounded-lg ma-4" />
                <MudText Typo="Typo.button">
                    mevalar
                </MudText>
                <MudButton Class="ml-4 " Variant="Variant.Filled">
                    <MudIcon Icon="@Icons.Material.Filled.ArrowForward"></MudIcon>
                </MudButton>
            </MudPaper>
        }
    </MudItem>

    <MudItem Class="my-20">
        <MudPaper>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

            <MudCarousel Class="mud-width-full" Style="height:275px;" TData="object" AutoCycle="false">
                <MudCarouselItem Class="mx-0"  Color="@Color.Primary" Transition="Transition.Slide">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:100%" Src="images/qulupnayPoster.png"/>
                </MudCarouselItem>
                <MudCarouselItem Class="mx-0"  Color="@Color.Primary" Transition="Transition.Slide">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:100%" Src="images/qulupnayPoster.png"/>
                </MudCarouselItem>
                <MudCarouselItem Class="mx-0"  Color="@Color.Primary" Transition="Transition.Slide">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:100%" Src="images/qulupnayPoster.png"/>
                </MudCarouselItem>
                <MudCarouselItem Class="mx-0"  Color="@Color.Primary" Transition="Transition.Slide">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:100%" Src="images/qulupnayPoster.png"/>
                </MudCarouselItem>
                <MudCarouselItem Class="mx-0"  Color="@Color.Primary" Transition="Transition.Slide">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:100%" Src="images/qulupnayPoster.png"/>
                </MudCarouselItem>
                <MudCarouselItem Class="mx-0"  Color="@Color.Primary" Transition="Transition.Slide">
                        <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%; height:100%" Src="images/qulupnayPoster.png"/>
                </MudCarouselItem>

                <MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="rotateIn" CustomTransitionExit="rotateOut">
                    <div class="d-flex" style="background-color:lightgray; height:100%">
                        <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Color="@Color.Secondary" Size="@Size.Large" />
                    </div>
                </MudCarouselItem>

            </MudCarousel>
        </MudPaper>
    </MudItem>

    <MudText Class="my-20" Typo="Typo.h6">
        Maxsulotlar
    </MudText>

    <MudItem Class="d-flex justify-center flex-wrap flex-grow-1 gap-4" MaxWidth="304px" Height="428px" Elevation="0">
    @for(int i = 0 ; i< 100; i++)
    {
            <MudCard Style="width:304px; height: 428px; border-radius:10px ;margin-left:4px; margin-right: 4px" Class="my-5" Elevation="4">
                <MudPaper Class="d-flex justify-center" Style="width:304px; height: 230px; border-radius:10px; align-content:center" Elevation="3">
                    <MudImage Class="align-self-center" Src="images/olma.png" Height="167" Width="182" />
                </MudPaper>
                <MudCardContent Class="align-center">
                    <MudText Color="Color.Success" Typo="Typo.h5">Семеринка яблоко</MudText>
                    <MudText Color="Color.Success" Typo="Typo.body2">12.000 so’m</MudText>

                    <MudItem Class="d-flex justify-center gap-4" Elevation="0">

                        <MudButton Style="width:42px;" Class="flex-1">
                            <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Success"/>
                        </MudButton>

                        <MudNumericField Style="width:130px; border:hidden" Class="d-flex flex-1" @bind-Value="doubleValue" Label="Miqdorini kiriting" Format="F1" Variant="Variant.Outlined" />
                        @code {
                            double doubleValue = new double();
                        }

                        <MudButton Style="width:42px;" Class="flex-1">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Success" />
                        </MudButton>

                    </MudItem>

                    <MudButton Class="my-5" Style="width:264px;" Variant="Variant.Outlined" >
                        <MudText Color="Color.Primary">Savatchaga </MudText>
                        <MudIcon Icon="@Icons.Material.Filled.LocalGroceryStore" Color="Color.Primary"/>
                    </MudButton>

                </MudCardContent>

            </MudCard>
    }
    </MudItem> 
</MudContainer>


    @code {
    private MudForm form;
    private bool coerceValue;
    private bool success1;
    private bool success2;
    private Choice choice1 = new();
    private Choice choice2 = new();
    private Choice choice3 = new();
    private EditContext editContext1;
    private EditContext editContext2;

    protected override void OnInitialized()
    {
        editContext1 = new EditContext(choice1);
        editContext2 = new EditContext(choice2);
    }

    private static string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> SearchAsync(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return states;
        }

        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private IEnumerable<string> Validate(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return "The State field is required";
            yield break;
        }

        if (!states.Contains(value))
        {
            yield return "This is an incorrect value";
        }
    }

    public class Choice
    {
        [Required]
        [State]
        public string State { get; set; }
    }

    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter)]
    public sealed class StateAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (!states.Contains(value))
            {
                return new ValidationResult("This is an incorrect value", new[] { validationContext.MemberName });
            }
            return null;
        }
    }
}